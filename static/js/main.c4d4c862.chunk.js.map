{"version":3,"sources":["components/CounterWindow.tsx","components/Button.tsx","redux/settings-reducer.ts","redux/counter-reducer.ts","components/Counter.tsx","components/SettingsWindow.tsx","components/Settings.tsx","App.tsx","reportWebVitals.ts","redux/store.ts","utils/localstorage.ts","index.tsx"],"names":["CounterWindow","props","className","value","limitValue","setting","error","Button","isDisabledButton","buttonValue","startValue","setButton","onClick","callBack","disabled","CHANGE_MAX_VALUE","CHANGE_MIN_VALUE","SET_CHANGES","InitialState","maxValue","minValue","ChangeMaxValueAC","maxNumber","type","ChangeMinValueAC","minNumber","INC_COUNTER_VALUE","RESET_COUNTER_VALUE","Counter","CounterValue","ResetValue","CounterContainer","connect","state","counter","dispatch","SettingsWindow","onChange","onMaxChangeHandler","onMinChangeHandler","SettingsContainer","store","settings","ChangeMaxValue","ChangeMinValue","e","currentTarget","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","createStore","serializedState","localStorage","getItem","JSON","parse","err","loadState","applyMiddleware","thunk","subscribe","stringify","setItem","saveState","getState","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c4d4c862.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport type CounterWindowPropsType = {\r\n    value: number\r\n    limitValue: number\r\n    setting: boolean\r\n    error: boolean\r\n}\r\n\r\nexport const CounterWindow = (props: CounterWindowPropsType) => {\r\n    const RetError = () => {\r\n        if(props.error){\r\n            return <span className='error'>Incorrect value!</span>\r\n        }\r\n\r\n        return <span className=\"text\">enter values and press 'set'</span>\r\n    }\r\n    return (\r\n        <div\r\n            className={props.value === props.limitValue && props.limitValue !== 0 ? 'limit' : 'counter'}>\r\n            {props.setting ? props.value :RetError()}\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React from 'react';\r\n\r\ntype ButtonPropsType = {\r\n    value: number\r\n    buttonValue: string\r\n    callBack: () => void\r\n    className: string\r\n    limitValue: number\r\n    startValue: number\r\n    setButton: boolean\r\n    setting: boolean\r\n    error: boolean\r\n\r\n}\r\n\r\nexport const Button = (props: ButtonPropsType) => {\r\n\r\n    const isDisabledButton = () => {\r\n        if (!props.setting &&\r\n            (props.buttonValue === 'INC' && props.value === props.limitValue) ||\r\n            (props.buttonValue === 'RESET' && props.value <= props.startValue)) {\r\n            return true;\r\n        } else if (props.setButton &&\r\n            (props.buttonValue === 'INC' && props.value === props.limitValue) ||\r\n            (props.buttonValue === 'RESET' && props.value <= props.startValue)) {\r\n            return false;\r\n        } else if (props.setButton && props.buttonValue !== 'SET') {\r\n            return true;\r\n        } else if (props.error) {\r\n            return true;\r\n        } else if ((props.buttonValue === 'INC' && props.value === props.limitValue) ||\r\n            (props.buttonValue === 'RESET' && props.value <= props.startValue)) {\r\n            return true;\r\n        } else if ((props.setButton && props.buttonValue === 'SET')) {\r\n            return false;\r\n        } else if ((!props.setButton && props.buttonValue === 'SET')) {\r\n            return true;\r\n        }\r\n    };\r\n\r\n    return (\r\n        <button\r\n            onClick={props.callBack}\r\n            disabled={isDisabledButton()}\r\n            className={\r\n                isDisabledButton() ? 'disable' : `${props.className}`\r\n            }>\r\n            {props.buttonValue}\r\n        </button>\r\n    );\r\n};\r\n\r\n/*\r\n!props.setButton||!props.setting ||\r\n(props.buttonValue === 'INC' && props.value === props.limitValue) ||\r\n(props.buttonValue === 'RESET' && props.value <= props.startValue) ?\r\n    'disable' : `${props.className}`*/\r\n","import {useEffect} from 'react';\r\nimport {store} from './store';\r\nimport {Dispatch} from 'redux';\r\n\r\nexport const CHANGE_MAX_VALUE = 'CHANGE_MAX_VALUE';\r\nexport const CHANGE_MIN_VALUE = 'CHANGE_MIN_VALUE';\r\nexport const SET_CHANGES = 'SET_CHANGES';\r\n\r\nexport type InitialStateType = typeof InitialState\r\nconst InitialState = {\r\n    value: 0,\r\n    maxValue: 1,\r\n    minValue: 0,\r\n    setButton: false,\r\n    setting: false,\r\n    error: false\r\n};\r\nexport type SettingActionType = ReturnType<typeof ChangeMaxValueAC>\r\n    & ReturnType<typeof ChangeMinValueAC>\r\n    & ReturnType<typeof SetChangesAC>\r\nexport const SettingsReducer = (state: InitialStateType = InitialState, action: SettingActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case CHANGE_MAX_VALUE: {\r\n            if ((action.maxNumber === state.minValue || state.minValue < 0) || state.minValue > action.maxNumber) {\r\n                return {\r\n                    ...state,\r\n                    error: state.error = true,\r\n                    setButton: state.setButton = true,\r\n                    setting: state.setting = false,\r\n                    maxValue: action.maxNumber,\r\n                };\r\n            } else return {\r\n                ...state,\r\n                setButton: state.setButton = true,\r\n                setting: state.setting = false,\r\n                maxValue: action.maxNumber,\r\n                error: state.error = false\r\n            };\r\n        }\r\n        case CHANGE_MIN_VALUE: {\r\n\r\n            if ((action.minNumber === state.maxValue\r\n                || state.maxValue < 0)\r\n                || state.maxValue < action.minNumber\r\n                || action.minNumber < 0) {\r\n                return {\r\n                    ...state,\r\n                    error: state.error = true,\r\n                    setButton: state.setButton = true,\r\n                    setting: state.setting = false,\r\n                    minValue: action.minNumber,\r\n                };\r\n            } else return {\r\n                ...state,\r\n                setButton: state.setButton = true,\r\n                setting: state.setting = false,\r\n                minValue: action.minNumber,\r\n                error: state.error = false\r\n            };\r\n        }\r\n        case SET_CHANGES: {\r\n            return {\r\n                ...state,\r\n                setButton: state.setButton = false,\r\n                setting: state.setting = true,\r\n            };\r\n        }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n};\r\n\r\n\r\nexport const ChangeMaxValueAC = (maxNumber: number) => {\r\n    return {\r\n        type: CHANGE_MAX_VALUE,\r\n        maxNumber: maxNumber,\r\n    };\r\n};\r\nexport const ChangeMinValueAC = (minNumber: number) => {\r\n    return {\r\n        type: CHANGE_MIN_VALUE,\r\n        minNumber: minNumber\r\n    };\r\n};\r\nexport const SetChangesAC = () => {\r\n    return {\r\n        type: SET_CHANGES\r\n    };\r\n};\r\n\r\nexport const ChangeMaxValueTC = (maxNumber: number) => (dispatch: Dispatch) => {\r\n    localStorage.setItem('maxValue',JSON.stringify(maxNumber))\r\n    dispatch(ChangeMaxValueAC(maxNumber))\r\n};\r\nexport const ChangeMinValueTC = (minNumber: number) => (dispatch: Dispatch) => {\r\n    localStorage.setItem('minValue',JSON.stringify(minNumber))\r\n    dispatch(ChangeMinValueAC(minNumber))\r\n};","import {CHANGE_MAX_VALUE, CHANGE_MIN_VALUE, SET_CHANGES, SettingActionType} from './settings-reducer';\r\n\r\nconst INC_COUNTER_VALUE = 'INC_COUNTER_VALUE';\r\nconst RESET_COUNTER_VALUE = 'RESET_COUNTER_VALUE';\r\ntype InitialStateType = typeof InitialState\r\ntype ActionsType = ReturnType<typeof IncCounterValueAC>\r\n    & ReturnType<typeof ResetCounterValueAC>\r\n    & SettingActionType\r\nconst InitialState = {\r\n    error: false,\r\n    setting: false,\r\n    setButton: false,\r\n    limitValue: 0,\r\n    value: 0,\r\n    startValue: 0,\r\n};\r\nexport const CounterReducer = (state: InitialStateType = InitialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case CHANGE_MAX_VALUE: {\r\n            if ((action.maxNumber === state.startValue || state.startValue < 0) || state.startValue > action.maxNumber) {\r\n                return {\r\n                    ...state,\r\n                    error: state.error = true,\r\n                    setButton: state.setButton = true,\r\n                    setting: state.setting = false,\r\n                    limitValue: state.startValue=action.maxNumber,\r\n                };\r\n            } else return {\r\n                ...state,\r\n                setButton: state.setButton = true,\r\n                setting: state.setting = false,\r\n                limitValue: state.startValue=action.maxNumber,\r\n                error: state.error = false\r\n            };\r\n        }\r\n        case CHANGE_MIN_VALUE: {\r\n            if ((action.minNumber === state.limitValue\r\n                || state.limitValue < 0)\r\n                || state.limitValue < action.minNumber\r\n                || action.minNumber < 0) {\r\n                return {\r\n                    ...state,\r\n                    error: true,\r\n                    setButton: state.setButton = true,\r\n                    setting: state.setting = false,\r\n                    startValue: state.startValue=action.minNumber,\r\n                };\r\n            } else return {\r\n                ...state,\r\n                setButton: state.setButton = true,\r\n                setting: state.setting = false,\r\n                startValue: state.startValue=action.minNumber,\r\n                error: false\r\n            };\r\n        }\r\n        case SET_CHANGES: {\r\n            return {\r\n                ...state,\r\n                setting: true,\r\n                setButton: false,\r\n                value: state.startValue\r\n            };\r\n        }\r\n        case INC_COUNTER_VALUE: {\r\n            return {\r\n                ...state,\r\n                value: state.value + 1\r\n            };\r\n        }\r\n        case RESET_COUNTER_VALUE: {\r\n            return {\r\n                ...state,\r\n                value: state.startValue,\r\n            };\r\n        }\r\n        default : {\r\n            return state;\r\n        }\r\n    }\r\n};\r\n\r\nexport const IncCounterValueAC = () => {\r\n    return {\r\n        type: INC_COUNTER_VALUE,\r\n    };\r\n};\r\nexport const ResetCounterValueAC = () => {\r\n    return {\r\n        type: RESET_COUNTER_VALUE,\r\n    };\r\n};","import React from 'react';\r\nimport {CounterWindow} from './CounterWindow';\r\nimport {Button} from './Button';\r\nimport {AppStateType} from '../redux/store';\r\nimport {Dispatch} from 'redux';\r\nimport {IncCounterValueAC, ResetCounterValueAC} from '../redux/counter-reducer';\r\nimport {connect} from 'react-redux';\r\n\r\ntype CounterPropsType = ReturnType<typeof MapStateToProps>&ReturnType<typeof MapDispatchToProps>\r\n\r\nconst Counter = (props: CounterPropsType) => {\r\n    return (\r\n        <div className=\"wrapper\">\r\n            <div className=\"inner\">\r\n                <CounterWindow\r\n                    error={props.error}\r\n                    setting={props.setting}\r\n                    limitValue={props.limitValue}\r\n                    value={props.value}/>\r\n                <div className=\"buttons\">\r\n                    <Button\r\n                        error={props.error}\r\n                        setting={props.setting}\r\n                        setButton={props.setButton}\r\n                        startValue={props.startValue}\r\n                        limitValue={props.limitValue}\r\n                        buttonValue={'INC'}\r\n                        value={props.value}\r\n                        callBack={props.CounterValue}\r\n                        className={'increment'}\r\n                    />\r\n                    <Button\r\n                        error={props.error}\r\n                        setting={props.setting}\r\n                        setButton={props.setButton}\r\n                        startValue={props.startValue}\r\n                        limitValue={props.limitValue}\r\n                        buttonValue={'RESET'}\r\n                        value={props.value}\r\n                        callBack={props.ResetValue}\r\n                        className={'reset'}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Counter;\r\n\r\n\r\nconst MapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        error: state.counter.error,\r\n        setting: state.counter.setting,\r\n        setButton: state.counter.setButton,\r\n        limitValue: state.counter.limitValue,\r\n        value: state.counter.value,\r\n        startValue: state.counter.startValue,\r\n    };\r\n};\r\nconst MapDispatchToProps = (dispatch: Dispatch) => {\r\n    return {\r\n        CounterValue: () => {\r\n            dispatch(IncCounterValueAC());\r\n        },\r\n        ResetValue: () => {\r\n            dispatch(ResetCounterValueAC());\r\n        }\r\n    };\r\n\r\n};\r\n\r\nexport const CounterContainer=connect(MapStateToProps,MapDispatchToProps)(Counter)","import React, {ChangeEvent} from 'react';\r\n\r\n\r\ntype SettingWindowPropsType = {\r\n    error: boolean\r\n    maxValue: number\r\n    minValue: number\r\n    onMinChangeHandler: (e: ChangeEvent<HTMLInputElement>) => void\r\n    onMaxChangeHandler: (e: ChangeEvent<HTMLInputElement>) => void\r\n}\r\n\r\nexport const SettingsWindow = (props:SettingWindowPropsType) => {\r\n    return (\r\n        <div className='settingWindow'>\r\n            <div className=\"value\">\r\n                <span>Max Value</span>\r\n                <input className={props.error?'inputErrorMax':'inputSet'}\r\n                       value={props.maxValue}\r\n                       onChange={props.onMaxChangeHandler} type=\"number\"/>\r\n            </div>\r\n            <div className=\"value\">\r\n                <span>Start Value</span>\r\n                <input className={props.error?'inputErrorMin':'inputSet'}\r\n                       value={props.minValue}\r\n                       onChange={props.onMinChangeHandler}\r\n                       type=\"number\"/>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React, {ChangeEvent} from 'react';\r\nimport '../App.css';\r\nimport {Button} from './Button';\r\nimport {SettingsWindow} from './SettingsWindow';\r\nimport {connect} from 'react-redux';\r\nimport {Dispatch} from 'redux';\r\nimport {AppStateType} from '../redux/store';\r\nimport {ChangeMaxValueAC, ChangeMinValueAC, SetChangesAC} from '../redux/settings-reducer';\r\n\r\ntype SettingPropsType = ReturnType<typeof MapStateToProps> &\r\n    ReturnType<typeof MapDispatchToProps> & {\r\n    className: string\r\n    buttonValue: string\r\n}\r\nconst Settings = (props: SettingPropsType) => {\r\n    const onMinChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.ChangeMinValue(+e.currentTarget.value);\r\n    };\r\n    const onMaxChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.ChangeMaxValue(+e.currentTarget.value);\r\n    };\r\n    return (\r\n        <div className=\"wrapper\">\r\n            <div className=\"inner\">\r\n                <SettingsWindow\r\n                    minValue={props.minValue}\r\n                    maxValue={props.maxValue}\r\n                    onMinChangeHandler={onMinChangeHandler}\r\n                    onMaxChangeHandler={onMaxChangeHandler}\r\n                    error={props.error}/>\r\n\r\n                <div className=\"buttons\">\r\n                    <Button\r\n                        error={props.error}\r\n                        startValue={props.minValue}\r\n                        setButton={props.setButton}\r\n                        setting={props.setting}\r\n                        callBack={props.callBack}\r\n                        value={props.value}\r\n                        className={props.className}\r\n                        buttonValue={props.buttonValue}\r\n                        limitValue={props.maxValue}/>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n};\r\nconst MapStateToProps = (store: AppStateType) => {\r\n    return {\r\n        value: store.settings.value,\r\n        maxValue: store.settings.maxValue,\r\n        minValue: store.settings.minValue,\r\n        setButton: store.settings.setButton,\r\n        setting: store.settings.setting,\r\n        error: store.settings.error,\r\n    };\r\n};\r\nconst MapDispatchToProps = (dispatch: Dispatch) => {\r\n    return {\r\n        ChangeMaxValue: (maxNumber: number) => {\r\n            dispatch(ChangeMaxValueAC(maxNumber));\r\n        },\r\n        ChangeMinValue: (minNumber: number) => {\r\n            dispatch(ChangeMinValueAC(minNumber));\r\n        },\r\n        callBack: () => {\r\n            dispatch(SetChangesAC());\r\n        },\r\n    };\r\n};\r\n\r\n\r\nexport const SettingsContainer = connect(MapStateToProps, MapDispatchToProps)(Settings);\r\n\r\n","import React from 'react';\r\nimport './App.css';\r\nimport {CounterContainer} from './components/Counter';\r\nimport { SettingsContainer } from './components/Settings';\r\n\r\n\r\nfunction App() {\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <SettingsContainer className={'setting'} buttonValue={'SET'}/>\r\n            <CounterContainer/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport {SettingsReducer} from './settings-reducer';\r\nimport {CounterReducer} from './counter-reducer';\r\nimport {loadState, saveState} from '../utils/localstorage';\r\nimport thunk from 'redux-thunk';\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    settings: SettingsReducer,\r\n    counter: CounterReducer,\r\n});\r\nexport const store = createStore(rootReducer, loadState(), applyMiddleware(thunk));\r\nstore.subscribe(() => {\r\n    saveState({\r\n        settings: store.getState().settings,\r\n        counter: store.getState().counter,\r\n    });\r\n});\r\nexport type AppStoreType = typeof store\r\nexport type AppStateType = ReturnType<typeof rootReducer>;\r\n\r\n\r\n","import {AppStateType} from '../redux/store';\r\n\r\n\r\nexport const loadState = () => {\r\n    try {\r\n        const serializedState = localStorage.getItem('app-state');\r\n        if (serializedState === null) {\r\n            return undefined;\r\n        }\r\n        return JSON.parse(serializedState);\r\n    } catch (err) {\r\n        return undefined;\r\n    }\r\n};\r\nexport const saveState = (state:AppStateType) => {\r\n    try {\r\n        const serializedState = JSON.stringify(state);\r\n        localStorage.setItem('app-state', serializedState);\r\n    } catch {\r\n        // ignore write errors\r\n    }\r\n};","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './redux/store';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}